local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = " dice debugerI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = PlayerGui

local DebugLabel = Instance.new("TextLabel")
DebugLabel.Size = UDim2.new(0, 500, 0, 300)
DebugLabel.Position = UDim2.new(0, 20, 0, 200)
DebugLabel.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
DebugLabel.BorderSizePixel = 2
DebugLabel.BorderColor3 = Color3.fromRGB(0, 255, 0)
DebugLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
DebugLabel.TextScaled = true
DebugLabel.Font = Enum.Font.SourceSansBold
DebugLabel.TextXAlignment = Enum.TextXAlignment.Left
DebugLabel.TextYAlignment = Enum.TextYAlignment.Top
DebugLabel.TextWrapped = true
DebugLabel.Text = "Loading..."
DebugLabel.Parent = ScreenGui

local TARGET_TILE_TYPES = { "infinity", "infinity_elixir" }
local startTime = tick()
local elixirCount = 0

local BoardModulePath = ReplicatedStorage.Client.Gui.Frames.Board
local BoardUtil = require(ReplicatedStorage.Shared.Utils.BoardUtil)
local LocalData = require(ReplicatedStorage.Client.Framework.Services.LocalData)
local ItemUtil = require(ReplicatedStorage.Shared.Utils.Stats.ItemUtil)
local Remote = require(ReplicatedStorage.Shared.Framework.Network.Remote)
local Board = require(BoardModulePath)

if not Board or not Board.Pieces then return end

local function updateUI(lastDice, stepsNeeded, foundInf)
    local elapsed = math.floor(tick() - startTime)
    local mins = math.floor(elapsed / 60)
    local secs = elapsed % 60
    local timeStr = string.format("%02d:%02d", mins, secs)

    local text = "🎲 DICE DEBUG PANEL\n"
    text = text .. "⏱ Time Running: " .. timeStr .. "\n\n"
    text = text .. "🎲 Last Dice Used: " .. (lastDice or "None") .. "\n"
    text = text .. "📏 Steps to Next Infinity: " .. (stepsNeeded or "??") .. "\n"
    text = text .. "✨ Infinity Elixirs Collected: " .. tostring(elixirCount) .. "\n"
    if foundInf then text = text .. "\n⚡ Infinity Tile DETECTED!" end
    DebugLabel.Text = text
end

task.spawn(function()
    while true do
        task.wait(1)

        local playerPiece = Board.Pieces[LocalPlayer.Name]
        local currentData = LocalData:Get()
        if not playerPiece or not currentData then continue end

        local startIndex = playerPiece.Index
        local totalNodes = #BoardUtil.Nodes
        local stepsNeeded, foundInf = nil, false

        for i = 1, totalNodes do
            local currentIndex = startIndex + i
            if currentIndex > totalNodes then currentIndex = currentIndex - totalNodes end

            local nodeData = BoardUtil.Nodes[currentIndex]
            if table.find(TARGET_TILE_TYPES, nodeData.Type) then
                stepsNeeded = i
                foundInf = true
                break
            end
        end

        if stepsNeeded == 1 then elixirCount += 1 end
        if not stepsNeeded then task.wait(10) continue end

        local bestDice = nil
        local function check(diceName)
            return ItemUtil:GetOwnedAmount(currentData, {Type = "Powerup", Name = diceName}) > 0
        end

        if stepsNeeded <= 4 then
            if check("Golden Dice") then bestDice = "Golden Dice"
            elseif check("Dice") then bestDice = "Dice"
            elseif check("Giant Dice") then bestDice = "Giant Dice" end
        elseif stepsNeeded <= 9 then
            if check("Dice") then bestDice = "Dice"
            elseif check("Giant Dice") then bestDice = "Giant Dice" end
        elseif stepsNeeded <= 50 then
            if check("Giant Dice") then bestDice = "Giant Dice" end
        end

        if not bestDice then task.wait(5) continue end

        local result
        local ok = pcall(function() result = Remote:InvokeServer("RollDice", bestDice) end)

        if ok and result and result.Roll and result.Tile and result.Tile.Index then
            playerPiece.Index = result.Tile.Index
            Remote:FireServer("ClaimTile")
            if table.find(TARGET_TILE_TYPES, result.Tile.Type) then elixirCount += 1 end
        else
            Remote:FireServer("ClaimTile")
        end

        updateUI(bestDice, stepsNeeded, foundInf)
        task.wait(1.5)
    end
end)        teleportToMysteryBox()
        farmPearlsUntilTarget()
        teleportToHatching()
    end
    
    local hatchEndTime = os.time() + 55
    while os.time() < hatchEndTime do
        if getPearlBalance() < TARGET then break end
        task.wait(1)
    end
    
    if getPearlBalance() >= TARGET then
        autoDeletePets()
        task.wait(5)
    end
end
