local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Network = ReplicatedStorage:WaitForChild("Shared")
    :WaitForChild("Framework")
    :WaitForChild("Network")
    :WaitForChild("Remote")
    :WaitForChild("RemoteEvent")

local LocalData = require(ReplicatedStorage.Client.Framework.Services.LocalData)
local PetsModule = require(
    ReplicatedStorage:WaitForChild("Shared")
        :WaitForChild("Data")
        :WaitForChild("Pets")
)

while true do
    local data = LocalData:Get()
    if not data or not data.Pets then
        warn("‚ùå No pets in inventory.")
        task.wait(1)
        continue
    end

    for _, pet in pairs(data.Pets) do
        local petInfo = PetsModule[pet.Name]
        if petInfo and petInfo.Rarity ~= "Secret" and petInfo.Rarity ~= "Infinity" then
            local args1 = {"DeletePet", pet.Id, 100, false}
            local args2 = {"DeletePet", pet.Id, 10, false}
            local args3 = {"DeletePet", pet.Id, 1, false}
            
            Network:FireServer(unpack(args1))
            Network:FireServer(unpack(args2))
            Network:FireServer(unpack(args3))
            
            print("üóëÔ∏è Deleted pet:", pet.Name, "| ID:", pet.Id, "| Rarity:", petInfo.Rarity)
            task.wait(0.1)
        end
    end
    
    task.wait(1)
end
