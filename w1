-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")
local LocalPlayer = Players.LocalPlayer

-- Remotes and modules
local NetworkEvent = ReplicatedStorage:FindFirstChild("NetworkEvent")
local NetworkFunction = ReplicatedStorage:FindFirstChild("NetworkFunction")
local Remote = require(ReplicatedStorage.Shared.Framework.Network.Remote)
local LocalData = require(ReplicatedStorage.Client.Framework.Services.LocalData)
local ItemUtil = require(ReplicatedStorage.Shared.Utils.Stats.ItemUtil)
local BoardUtil = require(ReplicatedStorage.Shared.Utils.BoardUtil)
local Board = require(ReplicatedStorage.Client.Gui.Frames.Board)

-- Utility functions
local function pressKey(key)
    VirtualInputManager:SendKeyEvent(true, key, false, game)
    task.wait(0.06)
    VirtualInputManager:SendKeyEvent(false, key, false, game)
end

local function teleportTo(obj, offset)
    offset = offset or Vector3.new(0,0,5)
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if hrp and obj then
        hrp.CFrame = obj.CFrame * CFrame.new(offset)
    end
end

local function getEggByName(name)
    return Workspace:FindFirstChild("Rendered")
        and Workspace.Rendered:FindFirstChild("Eggs")
        and Workspace.Rendered.Eggs:FindFirstChild(name)
end

local function getRiftByName(name)
    local rift = Workspace:FindFirstChild("Rendered")
        and Workspace.Rendered:FindFirstChild("Rifts")
        and Workspace.Rendered.Rifts:FindFirstChild(name)
    if rift then return rift:FindFirstChild("Egg") end
end

local function usePotions()
    task.spawn(function()
        while ALWAYS_RUN do
            for _, potion in ipairs(POTION_NAMES) do
                pcall(function()
                    if NetworkEvent then
                        NetworkEvent:FireServer("UsePotion", potion)
                    elseif NetworkFunction then
                        NetworkFunction:InvokeServer("UsePotion", potion)
                    end
                end)
                task.wait(POTION_GAP)
            end
            task.wait(POTION_DELAY)
        end
    end)
end

local function deletePets()
    local ok, data = pcall(function() return LocalData:Get() end)
    if ok and data and data.Pets then
        for _, pet in pairs(data.Pets) do
            if pet.Id then
                pcall(function()
                    if NetworkEvent then
                        NetworkEvent:FireServer("DeletePet", pet.Id, 1, false)
                    elseif NetworkFunction then
                        NetworkFunction:InvokeServer("DeletePet", pet.Id, 1, false)
                    end
                end)
                task.wait(0.05)
            end
        end
    end
end

-- Auto Hatch/Delete logic
task.spawn(function()
    local isHatching = true
    local switchTime = os.time()
    while ALWAYS_RUN do
        local now = os.time()
        if isHatching and (now - switchTime >= 55) then
            isHatching = false
            switchTime = now
        elseif not isHatching and (now - switchTime >= 5) then
            isHatching = true
            switchTime = now
        end

        if isHatching and AUTO_HATCH then
            if RIFT_EGG then
                teleportTo(getRiftByName(RIFT_EGG))
            else
                teleportTo(getEggByName(HATCH_1X_EGG))
            end
            pressKey(HATCH_KEY)
        elseif not isHatching and AUTO_DELETE then
            deletePets()
        end
        task.wait(0.1)
    end
end)

-- Chest functions
local function getChest(name)
    local rifts = Workspace:FindFirstChild("Rendered") and Workspace.Rendered:FindFirstChild("Rifts")
    if rifts and rifts:FindFirstChild(name) then
        local chest = rifts[name]:FindFirstChild("Chest")
        if chest then return chest:FindFirstChild(name) or chest end
    end
end

local function teleportToChest(chest)
    if chest and LocalPlayer.Character then
        local hrp = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        hrp.CFrame = chest.CFrame * CFrame.new(0,5,0)
    end
end

local function spamChestRE(chestName)
    task.spawn(function()
        while true do
            local chest = getChest(chestName)
            if chest then
                teleportToChest(chest)
                pressKey(Enum.KeyCode.R)
                pressKey(Enum.KeyCode.E)
            else
                break
            end
            task.wait(0.1)
        end
    end)
end

-- Dice board logic
task.spawn(function()
    while true do
        if FOCUS_DICE and Board and Board.Pieces then
            local piece = Board.Pieces[LocalPlayer.Name]
            local data = LocalData:Get()
            if piece and data then
                local startIndex,totalNodes = piece.Index,#BoardUtil.Nodes
                local stepsNeeded
                for i=1,totalNodes do
                    local nodeIndex = ((startIndex+i-1)%totalNodes)+1
                    local nodeData = BoardUtil.Nodes[nodeIndex]
                    if nodeData.Type=="infinity" or nodeData.Type=="infinity_elixir" then
                        stepsNeeded=i break
                    end
                end
                if stepsNeeded then
                    local function hasDice(name)
                        return ItemUtil:GetOwnedAmount(data,{Type="Powerup",Name=name})>0
                    end
                    local bestDice
                    if USE_GOLDEN_DICE and stepsNeeded<=GOLDEN_DICE_DISTANCE and hasDice("Golden Dice") then
                        bestDice="Golden Dice"
                    elseif stepsNeeded<=DICE_DISTANCE and hasDice("Dice") then
                        bestDice="Dice"
                    elseif stepsNeeded<=GIANT_DICE_DISTANCE and hasDice("Giant Dice") then
                        bestDice="Giant Dice"
                    end
                    if bestDice then
                        local result = Remote:InvokeServer("RollDice",bestDice)
                        if result and result.Tile then
                            piece.Index=result.Tile.Index
                        end
                        Remote:FireServer("ClaimTile")
                    end
                end
            end
        end
        task.wait(1.5)
    end
end)

-- Shrine donation
if ALWAYS_BUBBLE_SHRINE then
    local RemoteFunction = ReplicatedStorage:WaitForChild("Shared")
        :WaitForChild("Framework")
        :WaitForChild("Network")
        :WaitForChild("Remote")
        :WaitForChild("RemoteFunction")
    task.spawn(function()
        while true do
            RemoteFunction:InvokeServer("DonateToShrine",{
                Type=BUBBLE_SHRINE_TYPE,
                Level=BUBBLE_SHRINE_LEVEL,
                Name=BUBBLE_SHRINE_NAME,
                Amount=BUBBLE_SHRINE_AMOUNT
            })
            task.wait(BUBBLE_SHRINE_INTERVAL)
        end
    end)
end

-- Auto chest spam
task.spawn(function()
    while true do
        if AUTO_SPAM_SUPER_CHEST then spamChestRE("super-chest") end
        if AUTO_SPAM_DICE_CHEST then spamChestRE("dice-rift") end
        if AUTO_SPAM_ROYAL_CHEST then spamChestRE("royal-chest") end
        task.wait(5)
    end
end)

-- Start potions
usePotions()
