local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")

local LocalPlayer = Players.LocalPlayer
local NetworkEvent = ReplicatedStorage:FindFirstChild("NetworkEvent")
local NetworkFunction = ReplicatedStorage:FindFirstChild("NetworkFunction")

local function teleportToEggByName(name)
    local egg = Workspace:FindFirstChild("Rendered") and Workspace.Rendered:FindFirstChild("Eggs") and Workspace.Rendered.Eggs:FindFirstChild(name)
    if egg then
        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = egg.CFrame * CFrame.new(0,0,5)
        end
    end
end

local function teleportToRiftByName(name)
    local rift = Workspace:FindFirstChild("Rendered") and Workspace.Rendered:FindFirstChild("Rifts") and Workspace.Rendered.Rifts:FindFirstChild(name)
    if rift and rift:FindFirstChild("Egg") then
        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = rift.Egg.CFrame * CFrame.new(0,0,5)
        end
    end
end

local function pressKey(key)
    VirtualInputManager:SendKeyEvent(true, key, false, game)
    task.wait(0.06)
    VirtualInputManager:SendKeyEvent(false, key, false, game)
end

local function usePotions()
    while ALWAYS_RUN do
        for _, potion in ipairs(POTION_NAMES) do
            pcall(function()
                if NetworkEvent then
                    NetworkEvent:FireServer("UsePotion", potion)
                elseif NetworkFunction then
                    NetworkFunction:InvokeServer("UsePotion", potion)
                end
            end)
            task.wait(POTION_GAP)
        end
        task.wait(POTION_DELAY)
    end
end

local function deletePets()
    local ok, data = pcall(function() return LocalData and LocalData:Get() end)
    if ok and data and data.Pets then
        for _, pet in pairs(data.Pets) do
            if pet.Id then
                pcall(function()
                    if NetworkEvent then
                        NetworkEvent:FireServer("DeletePet", pet.Id, 1, false)
                    elseif NetworkFunction then
                        NetworkFunction:InvokeServer("DeletePet", pet.Id, 1, false)
                    end
                end)
                task.wait(0.05)
            end
        end
    end
end

task.spawn(usePotions)

task.spawn(function()
    local isHatching = true
    local switchTime = os.time()
    while ALWAYS_RUN do
        local now = os.time()
        if isHatching and (now - switchTime >= 55) then
            isHatching = false
            switchTime = now
        elseif not isHatching and (now - switchTime >= 5) then
            isHatching = true
            switchTime = now
        end

        if isHatching and AUTO_HATCH then
            if RIFT_EGG then
                teleportToRiftByName(RIFT_EGG)
                task.wait(0.2)
            else
                teleportToEggByName(HATCH_1X_EGG)
                task.wait(0.2)
            end
            pressKey(HATCH_KEY)
        elseif not isHatching and AUTO_DELETE then
            deletePets()
        end
        task.wait(0.1)
    end
end)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local VirtualInputManager = game:GetService("VirtualInputManager")

local BoardModulePath = ReplicatedStorage.Client.Gui.Frames.Board
local BoardUtil = require(ReplicatedStorage.Shared.Utils.BoardUtil)
local LocalData = require(ReplicatedStorage.Client.Framework.Services.LocalData)
local ItemUtil = require(ReplicatedStorage.Shared.Utils.Stats.ItemUtil)
local Remote = require(ReplicatedStorage.Shared.Framework.Network.Remote)
local Board = require(BoardModulePath)

local teleportArgs = {"WorldTeleport","Minigame Paradise"}
local summonArgs = {"SummonRift",{Name="dice-rift",Type="Chest",Time=5,World="Minigame Paradise"}}
local lastSummonTime = 0
local COOLDOWN_DURATION = 30*60
local lastTeleportTime = 0
local TELEPORT_INTERVAL = 20

local function teleportToWorld()
    ReplicatedStorage.Shared.Framework.Network.Remote.RemoteEvent:FireServer(unpack(teleportArgs))
end

local function executeSummon()
    if os.time()-lastSummonTime<COOLDOWN_DURATION then return false end
    local success = pcall(function()
        ReplicatedStorage.Shared.Framework.Network.Remote.RemoteFunction:InvokeServer(unpack(summonArgs))
    end)
    if success then lastSummonTime=os.time() return true end
    return false
end

local function getChest()
    return workspace:FindFirstChild("Rendered")
    and workspace.Rendered:FindFirstChild("Rifts")
    and workspace.Rendered.Rifts:FindFirstChild("dice-rift")
    and workspace.Rendered.Rifts["dice-rift"]:FindFirstChild("Chest")
    and workspace.Rendered.Rifts["dice-rift"].Chest:FindFirstChild("dice-rift")
end

local function teleportToChest()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")
    local chest = getChest()
    if chest then
        hrp.CFrame = chest.CFrame * CFrame.new(0,5,0)
        return true
    end
    return false
end

local function spamRE()
    while true do
        if getChest() then
            VirtualInputManager:SendKeyEvent(true,Enum.KeyCode.R,false,game)
            VirtualInputManager:SendKeyEvent(false,Enum.KeyCode.R,false,game)
            VirtualInputManager:SendKeyEvent(true,Enum.KeyCode.E,false,game)
            VirtualInputManager:SendKeyEvent(false,Enum.KeyCode.E,false,game)
        else
            break
        end
        wait(0.1)
    end
end

local function enableLogic()
    if FOCUS_DICE and Board and Board.Pieces then
        task.spawn(function()
            while true do
                task.wait(1)
                local playerPiece=Board.Pieces[LocalPlayer.Name]
                local currentData=LocalData:Get()
                if not playerPiece or not currentData then continue end
                local startIndex,totalNodes=playerPiece.Index,#BoardUtil.Nodes
                local stepsNeeded=nil
                for i=1,totalNodes do
                    local currentIndex=((startIndex+i-1)%totalNodes)+1
                    local nodeData=BoardUtil.Nodes[currentIndex]
                    if nodeData.Type=="infinity" or nodeData.Type=="infinity_elixir" then
                        stepsNeeded=i break
                    end
                end
                if not stepsNeeded then task.wait(10) continue end
                local function hasDice(diceName)
                    return ItemUtil:GetOwnedAmount(currentData,{Type="Powerup",Name=diceName})>0
                end
                local bestDice=nil
                if USE_GOLDEN_DICE and stepsNeeded<=GOLDEN_DICE_DISTANCE and hasDice("Golden Dice") then
                    bestDice="Golden Dice"
                elseif stepsNeeded<=DICE_DISTANCE and hasDice("Dice") then
                    bestDice="Dice"
                elseif stepsNeeded<=GIANT_DICE_DISTANCE and hasDice("Giant Dice") then
                    bestDice="Giant Dice"
                end
                if not bestDice then task.wait(5) continue end
                local result=Remote:InvokeServer("RollDice",bestDice)
                if result and result.Roll and result.Tile and result.Tile.Index then
                    playerPiece.Index=result.Tile.Index
                    Remote:FireServer("ClaimTile")
                else
                    Remote:FireServer("ClaimTile")
                end
                task.wait(1.5)
            end
        end)
    end

    teleportToWorld()
    wait(3)
    task.spawn(function()
        while true do
            if not getChest() then
                local summoned=executeSummon()
                if summoned then wait(3) end
            end
            if getChest() then
                if os.time()-lastTeleportTime>=TELEPORT_INTERVAL then
                    teleportToChest()
                    lastTeleportTime=os.time()
                end
                spamRE()
            end
            wait(5)
        end
    end)

    task.spawn(function()
        while true do
            task.wait(20)
            local chest=getChest()
            if chest then teleportToChest() end
        end
    end)
end

task.spawn(function()
    while true do
        local cycleStart=os.time()
        while os.time()-cycleStart<60*60 do
            local enableStart=os.time()
            while os.time()-enableStart<60 do
                enableLogic()
                task.wait(1)
            end
            task.wait(6*60)
        end
    end
end)
if ALWAYS_BUBBLE_SHRINE then
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local RemoteFunction = ReplicatedStorage:WaitForChild("Shared")
        :WaitForChild("Framework")
        :WaitForChild("Network")
        :WaitForChild("Remote")
        :WaitForChild("RemoteFunction")

    local function donate()
        local args = { 
            "DonateToShrine",
            {
                Type = BUBBLE_SHRINE_TYPE,
                Level = BUBBLE_SHRINE_LEVEL,
                Name = BUBBLE_SHRINE_NAME,
                Amount = BUBBLE_SHRINE_AMOUNT
            }
        }
        RemoteFunction:InvokeServer(unpack(args))
    end

    task.spawn(function()
        while true do
            donate()
            task.wait(BUBBLE_SHRINE_INTERVAL)
        end
    end)
end
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local VirtualInputManager = game:GetService("VirtualInputManager")

local function getChest(chestName)
    return workspace:FindFirstChild("Rendered")
    and workspace.Rendered:FindFirstChild("Rifts")
    and workspace.Rendered.Rifts:FindFirstChild(chestName)
    and workspace.Rendered.Rifts[chestName]:FindFirstChild("Chest")
    and workspace.Rendered.Rifts[chestName].Chest:FindFirstChild(chestName)
end

local function teleportToChest(chest)
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")
    hrp.CFrame = chest.CFrame * CFrame.new(0, 0, 5)
end

local function spamRE(chestName)
    while true do
        local chest = getChest(chestName)
        if chest then
            teleportToChest(chest)
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.R, false, game)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.R, false, game)
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        else
            break
        end
        task.wait(0.1)
    end
end

task.spawn(function()
    while true do
        if AUTO_SPAM_SUPER_CHEST then
            local chest = getChest("super-chest")
            if chest then
                spamRE("super-chest")
            end
        end
        if AUTO_SPAM_DICE_CHEST then
            local chest = getChest("dice-rift")
            if chest then
                spamRE("dice-rift")
            end
        end
        if AUTO_SPAM_ROYAL_CHEST then
            local chest = getChest("royal-chest")
            if chest then
                spamRE("royal-chest")
            end
        end
        task.wait(5)
    end
end)
