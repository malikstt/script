AUTO_DELETE = true
DELETE_AMOUNTS = {100, 10, 1}

KEEP_PETS = {"Willow Chandelier"}
KEEP_RARITIES = {"Secret", "Infinity"}
KEEP_TEAM = true

TELEPORT_POS = CFrame.new(108.36, 9.49, 238.35)
COIN_CLAIM_DELAY = 60

ONLY_FOX_OWISP = true

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer

local Network = ReplicatedStorage.Shared.Framework.Network.Remote.RemoteEvent
local LocalData = require(ReplicatedStorage.Client.Framework.Services.LocalData)
local PetsModule = require(ReplicatedStorage.Shared.Data.Pets)

require(ReplicatedStorage.Client.Effects.HatchEgg).Play = function() return end

local function getTeamPetIds()
    local ids = {}
    local ok, data = pcall(function() return LocalData:Get() end)
    if not ok or not data then return ids end
    local teamIndex = data.TeamEquipped
    if not teamIndex then return ids end
    local team = data.Teams and data.Teams[teamIndex]
    if not team or not team.Pets then return ids end
    for _, id in ipairs(team.Pets) do
        ids[id] = true
    end
    return ids
end

local function shouldKeep(pet, teamSet)
    for _, name in ipairs(KEEP_PETS or {}) do
        if pet.Name == name then return true end
    end
    local info = PetsModule[pet.Name]
    if info then
        for _, rarity in ipairs(KEEP_RARITIES or {}) do
            if info.Rarity == rarity then return true end
        end
    end
    if KEEP_TEAM and teamSet[pet.Id] then
        return true
    end
    return false
end

task.spawn(function()
    if not AUTO_DELETE then return end
    while true do
        local ok, data = pcall(function() return LocalData:Get() end)
        if ok and data and data.Pets then
            local teamSet = getTeamPetIds()
            for _, pet in pairs(data.Pets) do
                if pet.Id and not shouldKeep(pet, teamSet) then
                    for _, amount in ipairs(DELETE_AMOUNTS) do
                        pcall(function()
                            Network:FireServer("DeletePet", pet.Id, amount, false)
                        end)
                    end
                    task.wait(0.1)
                end
            end
        end
        task.wait(5)
    end
end)

local function teleportTo(pos)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = pos
    end
end

task.spawn(function()
    while true do
        teleportTo(TELEPORT_POS)
        VirtualInputManager:SendKeyEvent(true, "E", false, game)
        VirtualInputManager:SendKeyEvent(false, "E", false, game)
        task.wait(0.1)
    end
end)

task.spawn(function()
    local remotes = ReplicatedStorage
        :WaitForChild("Remotes")
        :WaitForChild("Pickups")
        :WaitForChild("CollectPickup")

    local claimed = {}
    while true do
        for _, child in ipairs(workspace.Rendered:GetChildren()) do
            for _, obj in ipairs(child:GetChildren()) do
                local id = obj.Name
                if not claimed[id] then
                    claimed[id] = true
                    pcall(function()
                        remotes:FireServer(id)
                        obj:Destroy()
                    end)
                end
            end
        end
        task.wait(COIN_CLAIM_DELAY)
    end
end)

task.spawn(function()
    if not ONLY_FOX_OWISP then return end
    while true do
        local ok, data = pcall(function() return LocalData:Get() end)
        if ok and data and data.Pets then
            local equipped = {}
            if data.Teams and data.TeamEquipped then
                local team = data.Teams[data.TeamEquipped]
                if team and team.Pets then
                    for _, id in ipairs(team.Pets) do
                        equipped[id] = true
                    end
                end
            end
            for _, pet in pairs(data.Pets) do
                if pet.Name == "Fox O' Wisp" then
                    if not equipped[pet.Id] then
                        Network:FireServer("EquipPet", pet.Id)
                        task.wait(0.1)
                    end
                elseif equipped[pet.Id] then
                    Network:FireServer("UnequipPet", pet.Id)
                    task.wait(0.1)
                end
            end
        end
        task.wait(5)
    end
end)
