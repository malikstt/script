local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Malik Hub",
    LoadingTitle = "Malik Hub",
    LoadingSubtitle = "by Malik",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MalikHub",
        FileName = "Malik Hub"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
})

local MainTab = Window:CreateTab("Main")
local JetpackTab = Window:CreateTab("Jetpacks", 4483362458)
local MasteryTab = Window:CreateTab("Mastery")
local UpgradesTab = Window:CreateTab("Upgrades")
local WorldsTab = Window:CreateTab("Worlds")
local HatchingTab = Window:CreateTab("Hatching")
local PotionTab = Window:CreateTab("Potions")

local EquipBest = false
local AutoClaimChest = false
local AutoAllMastery = false
local UpgradeToggles = {}
local AutoAllUpgrades = false
local WorldToggles = {}
local SelectedPotions = {}

local VirtualInputManager = game:GetService("VirtualInputManager")
getgenv().SpamT = false
getgenv().SpamR = false
getgenv().SpamE = false
getgenv().AutoClicker = false

local potions = {
    "Luck Potion I",
    "Luck Potion II", 
    "Luck Potion III",
    "Coin Potion I",
    "Coin Potion II",
    "Coin Potion III",
    "Gem Potion I",
    "Gem Potion II",
    "Gem Potion III",
    "Nitro",
    "Lucky Rainbow",
    "Gold Pot"
}

for _, potion in pairs(potions) do
    SelectedPotions[potion] = false
    PotionTab:CreateToggle({
        Name = "Use " .. potion,
        CurrentValue = false,
        Flag = "Potion_" .. potion,
        Callback = function(Value)
            SelectedPotions[potion] = Value
            if Value then
                local args = { "Use Item", potion, 50 }
                game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
                task.wait(0.5)
            end
        end,
    })
end

local function startSpamT()
    if getgenv().SpamT then return end
    getgenv().SpamT = true
    spawn(function()
        while getgenv().SpamT do
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.T, false, game)
            task.wait(0.5)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.T, false, game)
            task.wait(0.5)
        end
    end)
end

local function stopSpamT()
    getgenv().SpamT = false
end

local function startSpamR()
    if getgenv().SpamR then return end
    getgenv().SpamR = true
    spawn(function()
        while getgenv().SpamR do
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.R, false, game)
            task.wait(0.5)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.R, false, game)
            task.wait(0.5)
        end
    end)
end

local function stopSpamR()
    getgenv().SpamR = false
end

local function startSpamE()
    if getgenv().SpamE then return end
    getgenv().SpamE = true
    spawn(function()
        while getgenv().SpamE do
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
            task.wait(0.5)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
            task.wait(0.5)
        end
    end)
end

local function stopSpamE()
    getgenv().SpamE = false
end

local function startAutoClicker()
    if getgenv().AutoClicker then return end
    getgenv().AutoClicker = true
    spawn(function()
        local screenSize = workspace.CurrentCamera.ViewportSize
        local touchPosition = Vector2.new(screenSize.X / 2, screenSize.Y / 2)
        
        while getgenv().AutoClicker do
            VirtualInputManager:SendMouseButtonEvent(touchPosition.X, touchPosition.Y, 0, true, game, 1)
            task.wait()
            VirtualInputManager:SendMouseButtonEvent(touchPosition.X, touchPosition.Y, 0, false, game, 1)
            task.wait(0.1)
        end
    end)
end

local function stopAutoClicker()
    getgenv().AutoClicker = false
end

MainTab:CreateToggle({
    Name = "Auto Clicker",
    CurrentValue = false,
    Flag = "AutoClicker",
    Callback = function(Value)
        if Value then
            startAutoClicker()
        else
            stopAutoClicker()
        end
    end,
})

HatchingTab:CreateToggle({
    Name = "Auto Spam T",
    CurrentValue = false,
    Flag = "AutoSpamT",
    Callback = function(Value)
        if Value then
            startSpamT()
        else
            stopSpamT()
        end
    end,
})

HatchingTab:CreateToggle({
    Name = "Auto Spam R",
    CurrentValue = false,
    Flag = "AutoSpamR",
    Callback = function(Value)
        if Value then
            startSpamR()
        else
            stopSpamR()
        end
    end,
})

HatchingTab:CreateToggle({
    Name = "Auto Spam E",
    CurrentValue = false,
    Flag = "AutoSpamE",
    Callback = function(Value)
        if Value then
            startSpamE()
        else
            stopSpamE()
        end
    end,
})

local masteries = {
    "Eggs Hatched",
    "Legendaries Hatched",
    "Secrets Hatched",
    "Golden Crafted",
    "Rainbows Crafted",
    "Time Played",
    "Distance Flown",
    "Items Used",
    "Gems",
    "Coins"
}
local MasteryToggles = {}

for _, masteryName in pairs(masteries) do
    MasteryToggles[masteryName] = false
    MasteryTab:CreateToggle({
        Name = "Auto Max " .. masteryName,
        CurrentValue = false,
        Flag = "Mastery_" .. masteryName,
        Callback = function(Value)
            MasteryToggles[masteryName] = Value
        end,
    })
end

MasteryTab:CreateToggle({
    Name = "Auto Claim All Masteries",
    CurrentValue = false,
    Flag = "AutoAllMastery",
    Callback = function(Value)
        AutoAllMastery = Value
    end,
})

local player = game.Players.LocalPlayer
local upgradesFolder = player.PlayerGui.Menus.Upgrades.Frame.Main.List

UpgradesTab:CreateToggle({
    Name = "Auto Buy All Upgrades",
    CurrentValue = false,
    Flag = "AutoAllUpgrades",
    Callback = function(Value)
        AutoAllUpgrades = Value
    end,
})

for _, upgrade in pairs(upgradesFolder:GetChildren()) do
    if not string.find(upgrade.Name, "UI") then
        UpgradeToggles[upgrade.Name] = false
        UpgradesTab:CreateToggle({
            Name = "Auto Buy: " .. upgrade.Name,
            CurrentValue = false,
            Flag = "Upgrade_" .. upgrade.Name,
            Callback = function(Value)
                UpgradeToggles[upgrade.Name] = Value
            end,
        })
    end
end

local worldsFolder = workspace:WaitForChild("Worlds")
local worldList = {}
for _, world in pairs(worldsFolder:GetChildren()) do
    if not string.find(world.Name, "UI") then
        table.insert(worldList, world.Name)
    end
end
table.sort(worldList)

for index, worldName in ipairs(worldList) do
    WorldToggles[worldName] = false
    WorldsTab:CreateToggle({
        Name = "Auto TP: " .. worldName,
        CurrentValue = false,
        Flag = "World_" .. worldName,
        Callback = function(Value)
            WorldToggles[worldName] = Value
        end,
    })
end

local jetpackNames = {}
if player and player:FindFirstChild("PlayerGui") then
    local playerGui = player.PlayerGui
    if playerGui:FindFirstChild("Menus") and playerGui.Menus:FindFirstChild("Jetpacks") then
        local jetpacksFrame = playerGui.Menus.Jetpacks.Frame
        if jetpacksFrame:FindFirstChild("Holder") and jetpacksFrame.Holder:FindFirstChild("Jetpacks") then
            for _, jetpack in pairs(jetpacksFrame.Holder.Jetpacks:GetChildren()) do
                table.insert(jetpackNames, jetpack.Name)
            end
        end
    end
end

for _, jetpackName in pairs(jetpackNames) do
    JetpackTab:CreateButton({
        Name = "Buy " .. jetpackName,
        Callback = function()
            local args = { "Buy Jetpack", jetpackName }
            game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
        end,
    })
end

MainTab:CreateToggle({
    Name = "Equip Best",
    CurrentValue = false,
    Flag = "EquipBest",
    Callback = function(Value) EquipBest = Value end,
})

MainTab:CreateToggle({
    Name = "Auto Claim Chest",
    CurrentValue = false,
    Flag = "AutoClaimChest",
    Callback = function(Value) AutoClaimChest = Value end,
})

MainTab:CreateButton({
    Name = "Force Save Config",
    Callback = function()
        Rayfield:SaveConfiguration()
    end,
})

task.spawn(function()
    while task.wait(0.5) do
        if EquipBest then
            local args = { "Pet", { Action = "EquipBest" } }
            game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
        end
        if AutoClaimChest then
            local args = { "Claim Chest", "DailyChest" }
            game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
        end
        for potion, enabled in pairs(SelectedPotions) do
            if enabled then
                local args = { "Use Item", potion, 50 }
                game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
                task.wait(0.5)
            end
        end
    end
end)

task.spawn(function()
    while task.wait(1) do
        if AutoAllMastery then
            for i = 25, 1, -1 do
                for _, mastery in pairs(masteries) do
                    local args = { "Claim Mastery", mastery, i }
                    game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
                    task.wait(0.1)
                end
            end
        else
            for i = 25, 1, -1 do
                for masteryName, enabled in pairs(MasteryToggles) do
                    if enabled then
                        local args = { "Claim Mastery", masteryName, i }
                        game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
                        task.wait(0.1)
                    end
                end
            end
        end
    end
end)

task.spawn(function()
    while task.wait(0.5) do
        if AutoAllUpgrades then
            for upgradeName in pairs(UpgradeToggles) do
                local args = { "Upgrade", upgradeName }
                game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
            end
        else
            for upgradeName, enabled in pairs(UpgradeToggles) do
                if enabled then
                    local args = { "Upgrade", upgradeName }
                    game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
                end
            end
        end
    end
end)

task.spawn(function()
    while task.wait(0.5) do
        for index, worldName in ipairs(worldList) do
            if WorldToggles[worldName] then
                local args = { "Set Current World", index }
                game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
            end
        end
    end
end)
local MainTab = Window:CreateTab("Egg Teleporter", 4483362458)

local function getEggs()
    local eggs = {}
    if workspace:FindFirstChild("Eggs") then
        for _, egg in pairs(workspace.Eggs:GetChildren()) do
            if egg:IsA("Model") or egg:IsA("Part") then
                table.insert(eggs, egg.Name)
            end
        end
    end
    return eggs
end

local function teleportToEgg(eggName)
    local character = game.Players.LocalPlayer.Character
    if not character then return end
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local egg = workspace.Eggs:FindFirstChild(eggName)
    if egg then
        local pos
        if egg:IsA("Model") then
            local primaryPart = egg.PrimaryPart or egg:FindFirstChild("Handle") or egg:FindFirstChildWhichIsA("Part")
            pos = primaryPart and primaryPart.Position or egg:GetPivot().Position
        else
            pos = egg.Position
        end
        hrp.CFrame = CFrame.new(pos + Vector3.new(0,5,0))
    end
end

local eggs = getEggs()
table.sort(eggs)

for _, eggName in pairs(eggs) do
    MainTab:CreateButton({
        Name = eggName,
        Callback = function()
            teleportToEgg(eggName)
        end,
    })
end

local MiscTab = Window:CreateTab("Misc", 4483362458)

MiscTab:CreateToggle({
    Name = "Auto Delete",
    CurrentValue = false,
    Flag = "AutoDelete",
    Callback = function(Value)
        if not Rayfield.Flags["AutoDeleteLoop"] then
            Rayfield.Flags["AutoDeleteLoop"] = true
            coroutine.wrap(function()
                local player = game.Players.LocalPlayer
                local stats = game:GetService("ReplicatedStorage").Stats
                while true do
                    if Rayfield.Flags["AutoDelete"] then
                        local allPetsFolder = stats[player.Name].Pets
                        local equippedFolder = stats[player.Name]:FindFirstChild("EquippedPets")
                        local equippedIds = {}
                        if equippedFolder then
                            for _, pet in pairs(equippedFolder:GetChildren()) do
                                equippedIds[pet.Name] = true
                            end
                        end
                        local petsToDelete = {}
                        for _, pet in pairs(allPetsFolder:GetChildren()) do
                            if not equippedIds[pet.Name] then
                                table.insert(petsToDelete, pet.Name)
                            end
                        end
                        if #petsToDelete > 0 then
                            local args = { "Pet", { Action = "Delete", Pets = petsToDelete } }
                            game:GetService("ReplicatedStorage"):WaitForChild("Paper"):WaitForChild("Remotes"):WaitForChild("__remotefunction"):InvokeServer(unpack(args))
                        end
                        local args = { "Pet", { Action = "EquipBest" } }
                        game:GetService("ReplicatedStorage"):WaitForChild("Paper"):WaitForChild("Remotes"):WaitForChild("__remotefunction"):InvokeServer(unpack(args))
                    end
                    wait(5)
                end
            end)()
        end
    end,
})

MiscTab:CreateToggle({
    Name = "Auto Buy Merchant",
    CurrentValue = false,
    Flag = "AutoMerchant",
    Callback = function(Value)
        if not Rayfield.Flags["AutoMerchantLoop"] then
            Rayfield.Flags["AutoMerchantLoop"] = true
            coroutine.wrap(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Remotes = ReplicatedStorage:WaitForChild("Paper"):WaitForChild("Remotes"):WaitForChild("__remotefunction")
                while true do
                    if Rayfield.Flags["AutoMerchant"] then
                        for i = 1, 3 do
                            local args = { "Buy Merchant", "Slot"..i }
                            Remotes:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                    wait(30)
                end
            end)()
        end
    end,
})

MiscTab:CreateButton({
    Name = "Anti AFK",
    Callback = function()
        for _, x in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
            x:Disable()
        end
    end,
})
