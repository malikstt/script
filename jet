local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Malik Hub",
    LoadingTitle = "Malik Hub",
    LoadingSubtitle = "by Malik",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MalikHub",
        FileName = "Malik Hub"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
})

local MainTab = Window:CreateTab("Main")
local JetpackTab = Window:CreateTab("Jetpacks", 4483362458)
local MasteryTab = Window:CreateTab("Mastery")
local UpgradesTab = Window:CreateTab("Upgrades")
local WorldsTab = Window:CreateTab("Worlds")
local HatchingTab = Window:CreateTab("Hatching")

local AutoRace = false
local EquipBest = false
local AutoClaimChest = false
local AutoAllMastery = false
local UpgradeToggles = {}
local AutoAllUpgrades = false
local WorldToggles = {}
local AutoSpamM = false

local VIM = game:GetService("VirtualInputManager")

HatchingTab:CreateToggle({
    Name = "Auto Spam M",
    CurrentValue = false,
    Flag = "AutoSpamM",
    Callback = function(Value)
        AutoSpamM = Value
    end,
})

local masteries = {
    "Eggs Hatched",
    "Legendaries Hatched",
    "Secrets Hatched",
    "Golden Crafted",
    "Rainbows Crafted",
    "Time Played",
    "Distance Flown",
    "Items Used",
    "Gems",
    "Coins"
}
local MasteryToggles = {}

for _, masteryName in pairs(masteries) do
    MasteryToggles[masteryName] = false
    MasteryTab:CreateToggle({
        Name = "Auto Max " .. masteryName,
        CurrentValue = false,
        Flag = "Mastery_" .. masteryName,
        Callback = function(Value)
            MasteryToggles[masteryName] = Value
        end,
    })
end

MasteryTab:CreateToggle({
    Name = "Auto Claim All Masteries",
    CurrentValue = false,
    Flag = "AutoAllMastery",
    Callback = function(Value)
        AutoAllMastery = Value
    end,
})

local player = game.Players.LocalPlayer
local upgradesFolder = player.PlayerGui.Menus.Upgrades.Frame.Main.List

UpgradesTab:CreateToggle({
    Name = "Auto Buy All Upgrades",
    CurrentValue = false,
    Flag = "AutoAllUpgrades",
    Callback = function(Value)
        AutoAllUpgrades = Value
    end,
})

for _, upgrade in pairs(upgradesFolder:GetChildren()) do
    if not string.find(upgrade.Name, "UI") then
        UpgradeToggles[upgrade.Name] = false
        UpgradesTab:CreateToggle({
            Name = "Auto Buy: " .. upgrade.Name,
            CurrentValue = false,
            Flag = "Upgrade_" .. upgrade.Name,
            Callback = function(Value)
                UpgradeToggles[upgrade.Name] = Value
            end,
        })
    end
end

local worldsFolder = workspace:WaitForChild("Worlds")
local worldList = {}
for _, world in pairs(worldsFolder:GetChildren()) do
    if not string.find(world.Name, "UI") then
        table.insert(worldList, world.Name)
    end
end
table.sort(worldList)

for index, worldName in ipairs(worldList) do
    WorldToggles[worldName] = false
    WorldsTab:CreateToggle({
        Name = "Auto TP: " .. worldName,
        CurrentValue = false,
        Flag = "World_" .. worldName,
        Callback = function(Value)
            WorldToggles[worldName] = Value
        end,
    })
end

local jetpackNames = {}
if player and player:FindFirstChild("PlayerGui") then
    local playerGui = player.PlayerGui
    if playerGui:FindFirstChild("Menus") and playerGui.Menus:FindFirstChild("Jetpacks") then
        local jetpacksFrame = playerGui.Menus.Jetpacks.Frame
        if jetpacksFrame:FindFirstChild("Holder") and jetpacksFrame.Holder:FindFirstChild("Jetpacks") then
            for _, jetpack in pairs(jetpacksFrame.Holder.Jetpacks:GetChildren()) do
                table.insert(jetpackNames, jetpack.Name)
            end
        end
    end
end

for _, jetpackName in pairs(jetpackNames) do
    JetpackTab:CreateButton({
        Name = "Buy " .. jetpackName,
        Callback = function()
            local args = { "Buy Jetpack", jetpackName }
            game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
        end,
    })
end

MainTab:CreateToggle({
    Name = "Auto Race",
    CurrentValue = false,
    Flag = "AutoRace",
    Callback = function(Value) AutoRace = Value end,
})

MainTab:CreateToggle({
    Name = "Equip Best",
    CurrentValue = false,
    Flag = "EquipBest",
    Callback = function(Value) EquipBest = Value end,
})

MainTab:CreateToggle({
    Name = "Auto Claim Chest",
    CurrentValue = false,
    Flag = "AutoClaimChest",
    Callback = function(Value) AutoClaimChest = Value end,
})

task.spawn(function()
    while task.wait(0.5) do
        if AutoRace then
            local args1 = { "Start Track" }
            game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args1))
            local args2 = { "Collect Wins" }
            game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args2))
        end
        if EquipBest then
            local args = { "Pet", { Action = "EquipBest" } }
            game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
        end
        if AutoClaimChest then
            local args = { "Claim Chest", "DailyChest" }
            game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
        end
    end
end)

task.spawn(function()
    while task.wait(1) do
        if AutoAllMastery then
            for _, mastery in pairs(masteries) do
                for i = 1, 25 do
                    local args = { "Claim Mastery", mastery, i }
                    game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
                    task.wait(0.1)
                end
            end
        else
            for masteryName, enabled in pairs(MasteryToggles) do
                if enabled then
                    for i = 1, 25 do
                        local args = { "Claim Mastery", masteryName, i }
                        game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
                        task.wait(0.1)
                    end
                end
            end
        end
    end
end)

task.spawn(function()
    while task.wait(0.5) do
        if AutoAllUpgrades then
            for upgradeName in pairs(UpgradeToggles) do
                local args = { "Upgrade", upgradeName }
                game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
            end
        else
            for upgradeName, enabled in pairs(UpgradeToggles) do
                if enabled then
                    local args = { "Upgrade", upgradeName }
                    game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
                end
            end
        end
    end
end)

task.spawn(function()
    while task.wait(0.5) do
        for index, worldName in ipairs(worldList) do
            if WorldToggles[worldName] then
                local args = { "Set Current World", index }
                game:GetService("ReplicatedStorage").Paper.Remotes.__remotefunction:InvokeServer(unpack(args))
            end
        end
    end
end)

task.spawn(function()
    while task.wait(1) do
        if AutoSpamM then
            VIM:SendKeyEvent(true, Enum.KeyCode.M, false, game)
            task.wait()
            VIM:SendKeyEvent(false, Enum.KeyCode.M, false, game)
        end
    end
end)
