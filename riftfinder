if REMOVE_EGG_ANIMATION then
    require(game:GetService("ReplicatedStorage").Client.Effects.HatchEgg).Play = function() return end
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Network = ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("RemoteEvent")
local LocalData = require(ReplicatedStorage.Client.Framework.Services.LocalData)
local PetsModule = require(ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Data"):WaitForChild("Pets"))

local function convertToRiftName(displayName)
    return displayName:gsub(" ", "-"):lower()
end

local function findRiftByName()
    local riftNameToFind = convertToRiftName(RIFT_EGG)
    if workspace:FindFirstChild("Rendered") and workspace.Rendered:FindFirstChild("Rifts") then
        for _, rift in pairs(workspace.Rendered.Rifts:GetChildren()) do
            if rift.Name == riftNameToFind then return rift end
        end
    end
end

local function teleportToRift()
    local rift = findRiftByName()
    if rift then
        local character = game.Players.LocalPlayer.Character
        if character and character.PrimaryPart then
            character:SetPrimaryPartCFrame(CFrame.new(rift:GetPivot().Position + Vector3.new(0, 5, 0)))
            return true
        end
    end
    return false
end

local function shouldKeepPet(rarity)
    for _, keepRarity in ipairs(KEEP_RARITIES) do
        if rarity == keepRarity then return true end
    end
    return false
end

local function deleteUnwantedPets()
    local data = LocalData:Get()
    if data and data.Pets then
        for _, pet in pairs(data.Pets) do
            local petInfo = PetsModule[pet.Name]
            if petInfo and not shouldKeepPet(petInfo.Rarity) then
                Network:FireServer("DeletePet", pet.Id, 1000, false)
                task.wait(0.5)
                Network:FireServer("DeletePet", pet.Id, 100, false)
                task.wait(0.5)
                Network:FireServer("DeletePet", pet.Id, 10, false)
                task.wait(0.5)
            end
        end
    end
end

local function executeSummon()
    if not findRiftByName() then
        local args = {"SummonRift", {Type = "Egg", Time = 5, Name = RIFT_EGG, Luck = 5, World = "The Overworld"}}
        pcall(function()
            ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
        end)
    end
end

local isDeleting = false

task.spawn(function()
    while true do
        teleportToRift()
        task.wait(30)
    end
end)

if AUTO_SUMMON then
    task.spawn(function()
        while true do
            if not findRiftByName() then
                executeSummon()
                task.wait(math.random(1, 60))
            else
                task.wait(60)
            end
        end
    end)
end

if AUTO_HATCH then
    task.spawn(function()
        local VirtualInputManager = game:GetService("VirtualInputManager")
        while true do
            if not isDeleting then
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
                task.wait(0.1)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
                task.wait(0.1)
            else
                task.wait(1)
            end
        end
    end)
end

if AUTO_DELETE then
    task.spawn(function()
        while true do
            task.wait(DELETE_EVERY)
            isDeleting = true
            deleteUnwantedPets()
            isDeleting = false
        end
    end)
end
