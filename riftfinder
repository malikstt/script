if REMOVE_EGG_ANIMATION then
    require(game:GetService("ReplicatedStorage").Client.Effects.HatchEgg).Play = function() return end
end

local function convertToSummonName(riftName)
    return riftName:gsub("-", " "):gsub("(%a)([%w']*)", function(first, rest)
        return first:upper() .. rest:lower()
    end)
end

local function findRiftByName()
    if not workspace:FindFirstChild("Rendered") then return end
    if not workspace.Rendered:FindFirstChild("Rifts") then return end
    
    for _, rift in pairs(workspace.Rendered.Rifts:GetChildren()) do
        if rift.Name == RIFT_EGG then
            return rift
        end
    end
end

local function teleportToRift()
    local rift = findRiftByName()
    if rift then
        local character = game.Players.LocalPlayer.Character
        if character and character.PrimaryPart then
            local riftPosition = rift:GetPivot().Position
            local offset = Vector3.new(0, 5, 0)
            local targetCFrame = CFrame.new(riftPosition + offset)
            character:SetPrimaryPartCFrame(targetCFrame)
            return true
        end
    end
    return false
end

local function hatchEggs()
    local VirtualInputManager = game:GetService("VirtualInputManager")
    while true do
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        task.wait(0.1)
    end
end

local function shouldKeepPet(rarity)
    for _, keepRarity in ipairs(RARITIES_TO_KEEP) do
        if rarity == keepRarity then
            return true
        end
    end
    return false
end

local function deleteUnwantedPets()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Network = ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("RemoteEvent")
    local LocalData = require(ReplicatedStorage.Client.Framework.Services.LocalData)
    local PetsModule = require(ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Data"):WaitForChild("Pets"))
    
    local data = LocalData:Get()
    if data and data.Pets then
        for _, pet in pairs(data.Pets) do
            local petInfo = PetsModule[pet.Name]
            if petInfo and not shouldKeepPet(petInfo.Rarity) then
                local args = {"DeletePet", pet.Id, 100, false}
                Network:FireServer(unpack(args))
                task.wait(0.1)
            end
        end
    end
end

local function executeSummon()
    if not findRiftByName() then
        local summonName = convertToSummonName(RIFT_EGG)
        local args = { "SummonRift", { Type = "Egg", Time = 5, Name = summonName, Luck = 5, World = "The Overworld" } }
        pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
        end)
    end
end

if SUMMON_RIFT then
    task.spawn(function()
        while true do
            if not findRiftByName() then
                executeSummon()
                task.wait(math.random(1, 60))
            else
                task.wait(60)
            end
        end
    end)
end

task.spawn(function()
    while true do
        teleportToRift()
        task.wait(1)
    end
end)

if SPAM_E_KEY then
    task.spawn(hatchEggs)
end

if AUTO_DELETE then
    task.spawn(function()
        while true do
            deleteUnwantedPets()
            task.wait(DELETE_INTERVAL)
        end
    end)
end
