local function findRiftByName()
    for _, rift in pairs(workspace.Rendered.Rifts:GetChildren()) do
        if rift.Name == RIFT_EGG then
            return rift
        end
    end
end

local rift = findRiftByName()
if rift then
    local character = game.Players.LocalPlayer.Character
    local riftPosition = rift:GetPivot().Position
    local offset = Vector3.new(0, 5, 0)
    local targetCFrame = CFrame.new(riftPosition + offset)
    character:SetPrimaryPartCFrame(targetCFrame)
end

if SPAM_E_KEY then
    local VirtualInputManager = game:GetService("VirtualInputManager")
    local endTime = os.time() + HATCH_DURATION
    
    task.spawn(function()
        while os.time() < endTime do
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
            task.wait(0.1)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
            task.wait(0.1)
        end
    end)
    
    task.wait(HATCH_DURATION)
end

if AUTO_DELETE then
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Network = ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("RemoteEvent")
    local LocalData = require(ReplicatedStorage.Client.Framework.Services.LocalData)
    local PetsModule = require(ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Data"):WaitForChild("Pets"))
    
    local function shouldKeepPet(rarity)
        for _, keepRarity in ipairs(RARITIES_TO_KEEP) do
            if rarity == keepRarity then
                return true
            end
        end
        return false
    end
    
    local function deletePets()
        local data = LocalData:Get()
        if data and data.Pets then
            for _, pet in pairs(data.Pets) do
                local petInfo = PetsModule[pet.Name]
                if petInfo and not shouldKeepPet(petInfo.Rarity) then
                    local args1 = {"DeletePet", pet.Id, 100, false}
                    local args2 = {"DeletePet", pet.Id, 10, false}
                    local args3 = {"DeletePet", pet.Id, 1, false}
                    Network:FireServer(unpack(args1))
                    Network:FireServer(unpack(args2))
                    Network:FireServer(unpack(args3))
                    task.wait(0.1)
                end
            end
        end
    end
    
    while task.wait(DELETE_INTERVAL) do
        deletePets()
        wait(1)
    end
end
